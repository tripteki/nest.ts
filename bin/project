#!/bin/sh

#-https://github.com/tripteki/convention/blob/main/src/schema-#

projects="${NX_WORKING_PROJECTS:=admin}"

environment="${NODE_ENV:=development}"
project=basecode
color="\033[0;34m"

mobile=$project.mobile
web=$project.web

usage ()
{
    echo "Usage: $0 [-d (serve-development-mode)] [-p (serve-production-mode)] [-n (name-project) <...>] [-o (create-project) <center|tripteki>] [-b (build)] [-l (lint)] [-t (test)] [-e (e2e)] [-c (cache)]"

    exit 1
}

build ()
{
    echo "\n${color}Listening to Event : Build...\n"

    isCache=0

    if [ -e .cache ]
    then
        mv .cache .latest_cache
        yes | cache 1> /dev/null
        if [ $(cat .latest_cache) = $(cat .cache) ]
        then
            isCache=1
        fi
    fi
    if [ $isCache = 0 ]
    then
        if [ $environment = "development" ]
        then
            npm install --legacy-peer-deps

            if [ -d srcs ]
            then
                if [ ! -d srcs/$mobile/android -a ! -d srcs/$mobile/ios ]
                then
                    mv srcs/$mobile srcs/.$mobile
                    mv srcs/$mobile-e2e srcs/.$mobile-e2e

                    npx nx generate @nrwl/react-native:app $mobile --linter=eslint --unitTestRunner=jest --e2eTestRunner=detox --name=$mobile --js=false --skipFormat --skipPackageJson 1> /dev/null

                    mv srcs/$mobile/android srcs/.$mobile/android
                    mv srcs/$mobile/ios srcs/.$mobile/ios

                    mkdir -p node_modules/.trash
                    mv srcs/$mobile/ node_modules/.trash/`date +%Y%m%d%H%M%S`
                    mv srcs/$mobile-e2e/ node_modules/.trash/`date +%Y%m%d%H%M%S`
                    mv srcs/.$mobile srcs/$mobile
                    mv srcs/.$mobile-e2e srcs/$mobile-e2e
                fi
            fi
        else
            npm install --only=production --legacy-peer-deps
        fi

        npm install --save-dev prettier @tripteki/prettier-config typescript eslint @tripteki/eslint-config --legacy-peer-deps
    fi

    npx nx sync-deps $mobile --verbose
    npx nx run-many --parallel --target=build --projects=$projects --verbose
    npx nx build $web --verbose
    # npx nx bundle-android $mobile --verbose #
    # npx nx build-android $mobile-e2e --verbose #
    # npx nx bundle-ios $mobile --verbose #
    # npx nx build-ios $mobile-e2e --verbose #
}

lint ()
{
    echo "\n${color}Listening to Event : Lint...\n"

    npx prettier . --write --config ./node_modules/@tripteki/prettier-config/.prettierrc.json
    npx nx run-many --parallel --target=build --projects=$projects --fix --debug
    npx nx lint $web --debug --fix
    npx nx lint $web-e2e --debug --fix
    npx nx lint $mobile --debug --fix
    npx nx lint $mobile-e2e --debug --fix
}

test ()
{
    echo "\n${color}Listening to Event : Test...\n"

    npx nx run-many --parallel --target=test --projects=$projects,$web,$mobile --verbose
}

e2e ()
{
    echo "\n${color}Listening to Event : E2E...\n"

    npx nx e2e $web-e2e --verbose
    # npx nx test-android $mobile-e2e --verbose #
    # npx nx test-ios $mobile-e2e --verbose #
}

cache ()
{
    echo "\n${color}Listening to Event : Cache...\n"

    find . -not -path "*/android/*" -not -path "*/ios/*" -not -path "*/node_modules/*" -type f -iname package.json -exec sha256sum {} + | awk '{print $1}' | tr -d "\n\r" 1> .cache
}

serveDevelopment ()
{
    npx nx run-many --parallel --target=serve --projects=$projects,$web,$mobile --configuration=development --verbose
}

serveProduction ()
{
    PM2_HOME=logs/ecosystem npx pm2-runtime start ecosystem.json
}

create ()
{
    echo "\nCreating Project...\n"

    usage ()
    {
        echo "Usage: $0 [-s (source) <center|tripteki>]"

        exit 1
    }

    convention ()
    {
        curl -sL https://raw.githubusercontent.com/tripteki/convention/1.0.0/bin/apply | sh
    }

    clean ()
    {
        find . -type f -name "*.bak" -delete

        find bin -type f -name "ecosystem.json" -delete
        find bin -type f -name "httpd.conf" -delete
        find bin -type f -name "nginx.conf" -delete
        find bin -type f -name "Vagrantfile" -exec mv {} ./ \;
        find bin -type f -name ".dockerignore" -exec mv {} ./ \;
        find bin -type f -name "Dockerfile" -exec mv {} ./ \;
        find bin -type f -name "docker-compose.yml" -delete;
        find bin -type f -name "swarm.yml" -delete;
        find bin -type f -name "README.md" -delete
    }

    local OPTIND

    while getopts "s:h" option
    do
        case "$option" in

            "s")
                if [ $OPTARG = "center" ]
                then
                    npx create-nx-workspace@latest $project --cli=nx --pm=npm --preset=ts --interactive=false --skipGit
                    cd $project
                    mkdir -p {bin,src}
                    npm install pm2 --legacy-peer-deps
                    npm install --save-dev core-js --legacy-peer-deps
                    npm install react redux redux-thunk --legacy-peer-deps
                    npm install --save-dev @types/react @types/redux @types/react-redux @types/redux-thunk @types/react-native @types/react-dom @testing-library/react --legacy-peer-deps
                    npm install react-native --legacy-peer-deps
                    npm install --save-dev @nrwl/react-native --legacy-peer-deps
                    npm install react-dom --legacy-peer-deps
                    npm install --save-dev @fontsource/roboto @mui/icons-material @mui/material @emotion/react --legacy-peer-deps
                    npm install @nrwl/next --legacy-peer-deps
                    npm install @nrwl/nest @nestjs/config @nestjs/swagger --legacy-peer-deps
                    npm install --save-dev @nestjs/testing supertest --legacy-peer-deps
                    npx nx generate @nrwl/react-native:app $mobile --linter=eslint --unitTestRunner=jest --e2eTestRunner=detox --name=$mobile --js=false
                    npx nx generate @nrwl/next:app $web --linter=eslint --unitTestRunner=jest --e2eTestRunner=cypress --name=$web --js=false --style=@emotion/styled
                    npx nx generate @nrwl/nest:app "admin" --linter=eslint --unitTestRunner=jest --frontendProject $web
                    convention

                    build

                    lint
                elif [ $OPTARG = "tripteki" ]
                then
                    mkdir -p $project && wget -qO- https://github.com/tripteki/nest.ts/archive/refs/heads/main.tar.gz | tar -xzv -C $project --strip-component 1
                    cd $project
                    fgrep -r -l "Basecode" | xargs -I {} sed -i'.bak' -e "s/Basecode/"$(echo $project | awk '{print toupper(substr($0,1,1)) substr($0,2)}')"/g" {} 2> /dev/null
                    fgrep -r -l "BASECODE" | xargs -I {} sed -i'.bak' -e "s/BASECODE/"$(echo $project | awk '{print toupper($0)}')"/g" {} 2> /dev/null
                    fgrep -r -l "basecode" | xargs -I {} sed -i'.bak' -e "s/basecode/"$(echo $project | awk '{print tolower($0)}')"/g" {} 2> /dev/null
                    if [ -d srcs ]
                    then
                        mv srcs/basecode.web srcs/$web
                        mv srcs/basecode.web-e2e srcs/$web-e2e
                        mv srcs/basecode.mobile srcs/$mobile
                        mv srcs/basecode.mobile-e2e srcs/$mobile-e2e
                    fi
                    convention
                    clean

                    build

                    lint
                else
                    usage
                fi
                ;;

            "h")
                usage
                ;;

        esac
    done

    shift $((OPTIND-1))
}

optionServeDevelopment=
optionServeProduction=
sourceCreate=tripteki
optionCreate=
optionBuild=
optionLint=
optionTest=
optionE2E=
optionCache=

while getopts "n:o:dpbltech" option
do
    case "$option" in

        "d")
            optionServeDevelopment=1
            ;;

        "p")
            optionServeProduction=1
            ;;

        "n")
            optionCreate=1

            if [ $OPTARG ]
            then
                project=$(echo $OPTARG | sed -e "s/ //g" | awk '{print tolower($0)}')

                mobile=$project.mobile
                web=$project.web
            else
                usage
            fi
            ;;

        "o")
            optionCreate=1

            if [ $OPTARG = "center" ]
            then
                sourceCreate=center
            elif [ $OPTARG = "tripteki" ]
            then
                sourceCreate=tripteki
            else
                usage
            fi
            ;;

        "b")
            optionBuild=1
            ;;

        "l")
            optionLint=1
            ;;

        "t")
            optionTest=1
            ;;

        "e")
            optionE2E=1
            ;;

        "c")
            optionCache=1
            ;;

        "h")
            usage
            ;;

    esac
done

if [ $optionServeDevelopment ]
then
    serveDevelopment
    exit 0
fi

if [ $optionServeProduction ]
then
    serveProduction
    exit 0
fi

if [ $optionCreate ]
then
    create -s $sourceCreate
    echo "Ok."
    exit 0
fi

if [ $optionBuild ]
then
    build
fi

if [ $optionLint ]
then
    lint
fi

if [ $optionTest ]
then
    test
fi

if [ $optionE2E ]
then
    e2e
fi

if [ $optionCache ]
then
    cache
fi
